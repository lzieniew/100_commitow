High level overwiev of what has to be done for YarnYap - article to speech prgram, that will convert article or reddit thread into youtube video
  0. [x] Create a basic docker configuration with docker-compose, so the software can be run easily
  1. [x] Create Backend component and database, create simple endpoint for adding url to database
  2. [x] Create a background worker, make the basic mechanism of fetching the urls from database
  3. [x] Implement changing of the statuses in the worker
  4. [x] Define cleaning mechanism requirements, with basic manual tests using the styletts engine
  5. [x] Use coqui TTS as voice generation library
  6  [x] Get coqui to run in the dummy endpoint
  7. [x] Design and create an API that returns sound as a response
  8. [x] Implement receiving the raw sound and saving it as sound file in the worker
  9. [x] Create a service that will actually generate voice from text
  10. [x] Use the voice generating service in background worker, also implement mechanism for splitting the text into chunks which can be processed at once
  11. [ ] Implement cleaning mechanism in the background worker
  12. [ ] Write tests for cleaning
  13. [ ] Check if there is some way to clean already generated audio from those strange glitches
  14. [ ] Create the fetching mechanism
  15. [ ] Create a frontend in VUE js
  16. [ ] Adapt fetching mechanism for Reddit


Test sanitization and generation on this article: https://daniel.haxx.se/blog/2024/01/02/the-i-in-llm-stands-for-intelligence/)


Other things todo:
  - [x] make the list jobs endpoint return ids, that are visible in swagger
  - [x] fix import from shared in worker
  - [x] optimize Dockerfiles, so change in shared_components won't trigger reinstallation of all requirements
  - [x] setup tests with mongodb
  - [ ] implement saving elapsed time in Job model
  - [ ] implement uploading own voices
  - [ ] Change statuses to be more descriptive
  - [ ] Sanitazed text should be kept in mongo as table of sentences
  - [ ] Add progress field for generating - it will be useful for long texts
  - [ ] Try to implement some resuming mechanism (very useful for long jobs), maybe other collection in mongo with saving small files - it can even be deleted after job is done. The key might be job_id + index of sentence
  - [ ] ??? Implement automaticaly extracting sample voice from youtube link

Testing different TTS engines:
  - StyleTTS - current first choice, very fast, reasonable speed even on CPU only, good quality
  - https://github.com/jasonppy/VoiceCraft - to check, hard to run but very good quality
  - coqui TTS - license is worse than for example StyleTTS, but it soudns good in polish, so maybe I will try and use it
